/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package br.com.uem.iss.petshop.Main.view;

import br.com.uem.iss.petshop.Animal.controller.AnimalController;
import br.com.uem.iss.petshop.Animal.controller.AnimalListController;
import br.com.uem.iss.petshop.Animal.model.AnimalListModel;
import br.com.uem.iss.petshop.Animal.model.AnimalModel;
import br.com.uem.iss.petshop.Customer.controller.CustomerController;
import br.com.uem.iss.petshop.Customer.controller.CustomerListController;
import br.com.uem.iss.petshop.Customer.model.CustomerListModel;
import br.com.uem.iss.petshop.Customer.model.CustomerModel;
import br.com.uem.iss.petshop.Interfaces.ObserverJInternalFrame;
import br.com.uem.iss.petshop.Main.controller.MainController;
import br.com.uem.iss.petshop.Patology.controller.PatologyController;
import br.com.uem.iss.petshop.Patology.controller.PatologyListController;
import br.com.uem.iss.petshop.Patology.model.PatologyListModel;
import br.com.uem.iss.petshop.Patology.model.PatologyModel;
import br.com.uem.iss.petshop.Product.controller.ProductController;
import br.com.uem.iss.petshop.Product.controller.ProductListController;
import br.com.uem.iss.petshop.Product.model.ProductListModel;
import br.com.uem.iss.petshop.Product.model.ProductModel;
import br.com.uem.iss.petshop.Utils.State;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;

/*.view*
 *
 * @author EDUARDO
 */
public class MainView extends javax.swing.JFrame implements ObserverJInternalFrame{

    /**
     * Creates new form MainView
     */
    MainController mainController;
    
    public MainView(MainController m) {
        initComponents();
        mainController = m;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemCustomerRecord = new javax.swing.JMenuItem();
        jMenuItemProductRecord = new javax.swing.JMenuItem();
        jMenuItemAnimalRecord = new javax.swing.JMenuItem();
        jMenuItemPatologyRecord = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 257, Short.MAX_VALUE)
        );

        jMenu1.setText("Manutencao");

        jMenuItemCustomerRecord.setText("Cadastro de Clientes");
        jMenuItemCustomerRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCustomerRecordActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCustomerRecord);

        jMenuItemProductRecord.setText("Cadastro de Produtos");
        jMenuItemProductRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemProductRecordActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemProductRecord);

        jMenuItemAnimalRecord.setText("Cadastro de Animais");
        jMenu1.add(jMenuItemAnimalRecord);

        jMenuItemPatologyRecord.setText("Cadastro de Patologias");
        jMenu1.add(jMenuItemPatologyRecord);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Consultas");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Relatorios");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Sair");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemCustomerRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCustomerRecordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemCustomerRecordActionPerformed

    private void jMenuItemProductRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemProductRecordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemProductRecordActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAnimalRecord;
    private javax.swing.JMenuItem jMenuItemCustomerRecord;
    private javax.swing.JMenuItem jMenuItemPatologyRecord;
    private javax.swing.JMenuItem jMenuItemProductRecord;
    // End of variables declaration//GEN-END:variables

    
    JFrame jMainFrame;
    public void createControls() {
        jMainFrame = this;
        createCustomerAction();
        createProductAction();
        createAnimalAction();
        createPatologyAction();
        setLocationRelativeTo(null);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setVisible(true);
    }

    private void createCustomerAction() {
        jMenuItemCustomerRecord.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                customerAction();
            }
        });
    }
    
    private void customerAction(){
        CustomerListModel listModel;
        listModel = new CustomerListModel();
        CustomerListController listController;
        listController = new CustomerListController(listModel,jMainFrame);
        CustomerModel model;
        model = new CustomerModel();
        model.setEntity(listController.exec());
        if (listController.getState() == State.STATE_CANCEL)
            return;
        
        CustomerController c;
        c = new CustomerController(model, (ObserverJInternalFrame)jMainFrame);
        c.exec();
        
    }

    private void createProductAction() {
        jMenuItemProductRecord.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ProductListModel listModel;
                listModel = new ProductListModel();
                ProductListController listController;
                listController = new ProductListController(listModel,jMainFrame);
                ProductModel model;
                model = new ProductModel();
                model.setEntity(listController.exec());
                if (listController.getState() == State.STATE_CANCEL)
                    return;
                ProductController p;
                p = new ProductController(model, (ObserverJInternalFrame)jMainFrame);
                p.exec();
            }
        });
    }
    
    @Override
    public void addjDesktop(JInternalFrame customerView) {
        jDesktopPane1.add(customerView);
        try {
            customerView.setSelected(true);
        } catch (java.beans.PropertyVetoException e) {
        }
        
    }
    @Override
    public void wasFinalized(JInternalFrame view) {
        jDesktopPane1.remove(view);
        jDesktopPane1.repaint();
    }

    private void createAnimalAction() {
        jMenuItemAnimalRecord.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                animalAction();
            }
        });
    }
    
    private void animalAction(){
        AnimalListModel listModel;
        listModel = new AnimalListModel();
        AnimalListController listController;
        listController = new AnimalListController(listModel,this);
        AnimalModel model;
        model = new AnimalModel();
        model.setEntity(listController.exec());
        if (listController.getState() == State.STATE_CANCEL)
            return;
        
        AnimalController c;
        c = new AnimalController(model, (ObserverJInternalFrame)this);
        c.exec();

    }

    private void createPatologyAction() {
        jMenuItemPatologyRecord.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                patologyAction();
            }
        });
    }
    
    private void patologyAction() {
        PatologyListModel listModel;
        listModel = new PatologyListModel();
        PatologyListController listController;
        listController = new PatologyListController(listModel, this);
        PatologyModel model;
        model = new PatologyModel();
        model.setEntity(listController.exec());
        if (listController.getState() == State.STATE_CANCEL)
            return;
        
        PatologyController c;
        c = new PatologyController(model, (ObserverJInternalFrame)this);
        c.exec();
        
    }
}
