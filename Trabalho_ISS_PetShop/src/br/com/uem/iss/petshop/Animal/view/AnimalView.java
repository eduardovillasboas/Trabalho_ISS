/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package br.com.uem.iss.petshop.Animal.view;

import br.com.uem.iss.petshop.Interfaces.ObserverJInternalFrame;
import br.com.uem.iss.petshop.Animal.controller.AnimalController;
import br.com.uem.iss.petshop.Animal.model.AnimalModel;
import br.com.uem.iss.petshop.Interfaces.ViewInterface;
import br.com.uem.iss.petshop.Patology.model.Patology;
import br.com.uem.iss.petshop.Utils.DateUtil;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author EDUARDO
 */
public final class AnimalView extends javax.swing.JInternalFrame implements ViewInterface{

    /**
     * Creates new form AnimalView
     */
    ArrayList<ObserverJInternalFrame> oberverInternalFrames;
    AnimalController animalController;
    AnimalModel animalModel;
    public AnimalView(AnimalController c,
                      AnimalModel m) {
        initComponents();
        animalController = c;
        animalModel = m;
        oberverInternalFrames = new ArrayList<>();
        updateViewFromModel();
        animalModel.registerErrorObserver(this);
        animalModel.registerUpdate(this);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jFormattedTextFieldBirth = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldBreed = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButtonAddPatology = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jFormattedTextFieldWeight = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        jFormattedTextFieldHeight = new javax.swing.JFormattedTextField();
        jButtonRemovePatology = new javax.swing.JButton();
        jButtonRecord = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePathology = new javax.swing.JTable();

        setMaximizable(true);
        setResizable(true);
        setTitle("Cadastro de Animais");

        jLabel1.setText("Nome:");

        jTextFieldName.setText("jTextField1");

        jLabel2.setText("Dt.Nasc.:");

        jFormattedTextFieldBirth.setText("jFormattedTextField1");

        jLabel3.setText("Ra√ßa:");

        jTextFieldBreed.setText("jTextField1");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Patologias");

        jButtonAddPatology.setText("Adicionar");

        jLabel5.setText("Peso:");

        jFormattedTextFieldWeight.setText("jFormattedTextField2");

        jLabel6.setText("Alt.:");

        jFormattedTextFieldHeight.setText("jFormattedTextField3");
        jFormattedTextFieldHeight.setToolTipText("Digite a altura. Ex: 1.10 ou 0.90");

        jButtonRemovePatology.setText("Remover");

        jButtonRecord.setText("Gravar");

        jButtonCancel.setText("Cancelar");

        jTablePathology.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTablePathology);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRecord)))
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonAddPatology)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRemovePatology)
                .addContainerGap(237, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldBreed))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFormattedTextFieldWeight)
                    .addComponent(jFormattedTextFieldBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormattedTextFieldHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jFormattedTextFieldBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jFormattedTextFieldHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldBreed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jFormattedTextFieldWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jButtonAddPatology)
                    .addComponent(jButtonRemovePatology))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonRecord))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddPatology;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonRecord;
    private javax.swing.JButton jButtonRemovePatology;
    private javax.swing.JFormattedTextField jFormattedTextFieldBirth;
    private javax.swing.JFormattedTextField jFormattedTextFieldHeight;
    private javax.swing.JFormattedTextField jFormattedTextFieldWeight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTablePathology;
    private javax.swing.JTextField jTextFieldBreed;
    private javax.swing.JTextField jTextFieldName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void register(ObserverJInternalFrame o) {
        oberverInternalFrames.add(o);
    }

    @Override
    public void updateObserversWasFinalized() {
        for (ObserverJInternalFrame observerJInternalFrame : oberverInternalFrames) {
            observerJInternalFrame.wasFinalized(this);
        }
    }

    @Override
    public void updateViews(String msg) {
        if (msg != null){
            JOptionPane.showMessageDialog(this, msg);
            return;
        }
        updateViewFromModel();
    }

    @Override
    public void errorOcurred(String error) {
        if (error != null)
            JOptionPane.showMessageDialog(this, error, "Informa√ß√£o", JOptionPane.INFORMATION_MESSAGE);
        else
            JOptionPane.showMessageDialog(this, "um erro desconhecido ocorreu", "Aten√ß√£o", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void updateViewFromModel() {
        DateUtil dateUtil = new DateUtil();
        
        jTextFieldName.setText(animalModel.getName());
        jTextFieldBreed.setText(animalModel.getBreed());
        jFormattedTextFieldBirth.setText(dateUtil.toString(animalModel.getBirth()));
        if (animalModel.getHeight() == 0)
            jFormattedTextFieldHeight.setText("");
        else
            jFormattedTextFieldHeight.setText(Double.toString(animalModel.getHeight()));
        if (animalModel.getWeight() == 0)
            jFormattedTextFieldWeight.setText("");
        else
            jFormattedTextFieldWeight.setText(Double.toString(animalModel.getWeight()));
        
        refreshPathologyTable();
        
    }

    @Override
    public void createActions() {
        createActionRecord();
        createActionCancel();
        createActionAddPathology();
        createActionRemovePathology();
    }

    @Override
    public void configure() {
        createActions();
        setVisible(true);
    }

    @Override
    public void updateModelFromViewValues() {
        DateUtil dateUtil = new DateUtil();
    
        animalModel.setName(jTextFieldName.getText());
        animalModel.setBirth(dateUtil.toDate(jFormattedTextFieldBirth.getText()));
        animalModel.setBreed(jTextFieldBreed.getText());
        if (jFormattedTextFieldHeight.getText().isEmpty())
            animalModel.setHeight(0d);
        else 
            try {
                animalModel.setHeight(new Double(jFormattedTextFieldHeight.getText()));
            } catch (NumberFormatException e) {
            }
            
        if (jFormattedTextFieldWeight.getText().isEmpty())
            animalModel.setWeight(0d);
        else
            try {
                animalModel.setWeight(new Double(jFormattedTextFieldWeight.getText()));
            } catch (NumberFormatException e) {
            }
            
        
    }

    private void createActionRecord() {
        jButtonRecord.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                actionRecord();
            }
        });
    }

    private void actionRecord(){
        DateUtil dateUtil = new DateUtil();
        if (!dateUtil.isValid(jFormattedTextFieldBirth.getText())){
            JOptionPane.showMessageDialog(this, "Data inv√°lida!","Informa√ß√£o", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        if (JOptionPane.showConfirmDialog(this, "Confirma grava√ß√£o?", "Mensage do sistema", JOptionPane.INFORMATION_MESSAGE) != 
                JOptionPane.YES_OPTION)
            return;
        
        if (jFormattedTextFieldHeight.getText().contains(",")){
            JOptionPane.showMessageDialog(this, "O campo altura deve utilizar ponto(.) como separador!", "Mensagem do sistema", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (jFormattedTextFieldWeight.getText().contains(",")){
            JOptionPane.showMessageDialog(this, "O campo peso deve utilizar ponto(.) como separador!", "Mensagem do sistema", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (animalController.persist())
            finalizeView();
    }
    
    private void finalizeView() {
        updateObserversWasFinalized();
        dispose();
    }

    private void createActionCancel() {
        jButtonCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                finalizeView();
            }
        });
    }

    private void createActionAddPathology() {
        jButtonAddPatology.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                actionAddPathology();
            }
        });
    }

    private void actionAddPathology() {
        animalController.addPathology();
        refreshPathologyTable();
    }
    
    private void createActionRemovePathology() {
        jButtonRemovePatology.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                actionRemovePathology();
            }
        });
    }
    
    private void actionRemovePathology() {
        if (jTablePathology.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this, "Nenhuma patologia selecionada", "Informa√ß√£o", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Patology patology = animalModel.getPathology(jTablePathology.getSelectedRow());
        animalController.removePathology(patology);
        refreshPathologyTable();
    }
    
    private void refreshPathologyTable() {
        jTablePathology.setModel(animalModel.createModel());
        jTablePathology.revalidate();
        jTablePathology.clearSelection();
    }
}
